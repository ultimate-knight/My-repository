#merge sort from leet code#
def mergesort(nums1,m,n,self,nums2):
    p1=m-1
    p2=n-1
    p=m+n-1
    while nums1[p1]>=0 and nums2[p2]>=0:
        if nums1[p1]>nums2[p2]:
            nums1[p1]=nums1[p]
            p1-=1
        else:
            nums2[p2]=nums1[p]
            p2-=1
            p-=1
    
    while nums2[p2]>=0:
        nums1[p]=nums2[p2]
        p-=1
        p2-=1
#intersection of arrays
def intersection(self,nums1,num,result,nums2):
    set1=set(nums1)
    result=[]
    print(nums[2])
    for num in nums2:
        if num in set1:
            result.append(num)
    return set(result)
#unique character in string
def uniqchar(self,s):
    char_count=[]
    for char in s:
        char_count[char]=char_count.get(char,0)+1
    
    for i in range(len(s)):
        if char_count[s[i]]==1:
            return i
    
    return -1
#code segment
def segment(self,s):
    count=0
    for i in range(len(s)):
        if s[i]!='' and (i==0 or s[i-1]=''):
            count+=1
    return count
#difference of array
def difference(nums1,nums2,nums):
    set_nums1=set(nums1)
    set_nums2=set(nums2)
    distinct_nums1=set_nums1.difference(nums2)
    distinct_nums2=set_nums2.difference(nums1)
    return[list(distinct_nums1), list(distinct_nums2)]
#distance value of an array
def distancevalue(arr1,arr2,d,self):
    distance=0
    for nums1 in arr1:
        if all(abs(num1-num2)>d for nums2 in arr2):
            distance+=1
        return distance
#reversing subarray
def reverse(self,target,array):
    if len(array)!=len(target):
        return False
    
    array.sort()
    target.sort()

    for i in range(len(array)):
        if array[i]!=target[i]:
            return False
    
    return True
#strings are equal
def stringsarequal(self,word1,word2):
    s1=''.join(word1)
    s2=''.join(word2)

    if s1==s2:
        return True
    else:
        return False
#intersection of multiple arrays
def multiplearrays(self,nums):
    elements=set(nums[0])
    for subarray in nums[1:]:
        elements.intersection_update(subarray)
    
    return sorted(list(elements))
#merge 2d arrays
def mergearrays(self,nums1,nums2):
    result_count={}
    for idi,vali in nums1:
        result_count[idi]=result_count.get(idi,0)+vali
    for idi,vali in nums2:
        result_count[idi]=result_count.get(idi,0)+vali
    
    result=[[idi,vali] for idi,vali in result_count.items()]
    result.sort()
    return result


    

